
--drop PROC [dbo].[PRC_WODVOLUMEVALUETARGETASSIGN ]

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PRC_WODTARGETASSIGN]') AND type in (N'P', N'PC')) 
 BEGIN 
 EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [PRC_WODTARGETASSIGN] AS'  
 END 
 GO
ALTER PROC [dbo].[PRC_WODTARGETASSIGN] 
(
@ACTION NVARCHAR(150) = NULL,
@TargetType NVARCHAR(100) = '',
@TARGET_ID BIGINT = 0 ,
@TargetDate DATETIME = NULL,
@TargetNo NVARCHAR(100) = '',
@USER_ID BIGINT=NULL,
@FSM_UDT_WODTARGETASSIGN FSM_UDT_WODTARGETASSIGN ReadOnly,
@ReturnValue BIGINT=0 OUTPUT,
@UNIQUETARGETLEVELID bigint=0,
@UNIQUETARGETLEVEL nvarchar(200)='',
@UNIQUEINTERNALID nvarchar(10)='' ,
@UNIQUETIMEFRAME nvarchar(200)='' ,
@UNIQUESTARTEDATE datetime= NULL,
@UNIQUEENDDATE datetime= NULL
	
) --WITH ENCRYPTION
AS  
/************************************************************************************************
Written by : Priti Roy on 06/11/2024
0027770:A new module is required as  Target Assign

************************************************************************************************/ 
    SET NOCOUNT ON ;
    BEGIN TRY 
	BEGIN TRANSACTION	

	DECLARE @SALESTARGETID BIGINT = 0;
	Declare @LastCount bigint=0,@LastCountDetails bigint=0
	DECLARE @Success BIT = 0;
	DECLARE @TARGETLEVELID bigint=0,@TARGETLEVEL nvarchar(200)='',@INTERNALID nvarchar(10)='' ,@TIMEFRAME nvarchar(200)='' ,@STARTEDATE datetime,@ENDDATE datetime
	,@WODCOUNT bigint=0,@WODNAME nvarchar(200)='',@ORDERAMOUNT Numeric(18,4)=0,@COLLECTION Numeric(18,4)=0, @ORDERQTY Numeric(18,4)=0

	
		IF @ACTION = 'INSERTWODTARGET'
		BEGIN

		IF @TargetNo IS NOT NULL AND @TargetNo <> ''
		BEGIN

					select  @LastCount=iSNULL(MAX(WODTARGET_ID),0) from FSM_WODTARGETASSIGN  
					INSERT INTO FSM_WODTARGETASSIGN(WODTARGET_ID,WODTARGETTYPE,WODTARGETDOCNUMBER,WODTARGETDATE,CREATEDBY,CREATEDON) 
					VALUES(@LastCount+1,@TargetType,@TargetNo,@TargetDate,@USER_ID,GETDATE());			

					
					DECLARE db_cursor CURSOR FOR  
					Select 	TARGETLEVELID,TARGETLEVEL,INTERNALID,TIMEFRAME ,STARTEDATE,ENDDATE,WODCOUNT
					From @FSM_UDT_WODTARGETASSIGN order by SlNo ASC				

					OPEN db_cursor   
					FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT

					WHILE @@FETCH_STATUS = 0   
					BEGIN 

							select  @LastCountDetails=iSNULL(MAX(WODTARGETDETAILS_ID),0) from FSM_WODTARGETASSIGN_DETAILS  
							INSERT INTO FSM_WODTARGETASSIGN_DETAILS(WODTARGETDETAILS_ID,WODTARGET_ID,WODTARGETDOCNUMBER
							,TARGETLEVELID,TARGETLEVEL,
							INTERNALID,TIMEFRAME,STARTEDATE,ENDDATE,WODCOUNT,WODTARGETTYPE,CREATEDBY,CREATEDON	
							)
							Select @LastCountDetails+1,@LastCount+1,@TargetNo
							,@TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT,@TargetType,@USER_ID,GETDATE()
							
					
							SET @Success = 1;

					 FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT
					END   

					CLOSE db_cursor   
					DEALLOCATE db_cursor
					END
			

		SELECT @LastCount+1 AS DetailsID, @Success AS 'Success';

		END

		Else IF @ACTION = 'UPDATEWODTARGET'
		BEGIN

		IF @TargetNo IS NOT NULL AND @TargetNo <> ''
		BEGIN


					update FSM_WODTARGETASSIGN set WODTARGETTYPE=@TargetType,WODTARGETDOCNUMBER=@TargetNo,WODTARGETDATE=@TargetDate,UPDATEDBY=@USER_ID,UPDATEDON=GETDATE()
					where WODTARGET_ID=@TARGET_ID


					delete from FSM_WODTARGETASSIGN_DETAILS where WODTARGET_ID=@TARGET_ID

					
					DECLARE db_cursor CURSOR FOR  
					Select 	TARGETLEVELID,TARGETLEVEL,INTERNALID,TIMEFRAME ,STARTEDATE,ENDDATE,WODCOUNT
					From @FSM_UDT_WODTARGETASSIGN order by SlNo ASC	

					OPEN db_cursor   
					FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT

					WHILE @@FETCH_STATUS = 0   
					BEGIN 

							select  @LastCountDetails=iSNULL(MAX(WODTARGETDETAILS_ID),0) from FSM_WODTARGETASSIGN_DETAILS  
							INSERT INTO FSM_WODTARGETASSIGN_DETAILS(WODTARGETDETAILS_ID,WODTARGET_ID,WODTARGETDOCNUMBER
							,TARGETLEVELID,TARGETLEVEL,
							INTERNALID,TIMEFRAME,STARTEDATE,ENDDATE,WODCOUNT,CREATEDBY,CREATEDON	
							)
							Select @LastCountDetails+1,@LastCount+1,@TargetNo
							,@TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT,@USER_ID,GETDATE()
							
					
							SET @Success = 1;

					 FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@WODCOUNT
					END   

					CLOSE db_cursor   
					DEALLOCATE db_cursor
					END

		SELECT @TARGET_ID AS DetailsID, @Success AS 'Success';

		END

		else IF @ACTION = 'GETDETAILSWODTARGET'
		Begin
		
		select WODTARGETDETAILS_ID,ROW_NUMBER() OVER(ORDER BY WODTARGETDETAILS_ID ASC) AS SlNO,WODTARGETDOCNUMBER TARGETDOCNUMBER, TARGETLEVELID,TARGETLEVEL,INTERNALID,
						TIMEFRAME,CONVERT(nvarchar(10),STARTEDATE,105) STARTEDATE, CONVERT(nvarchar(10),ENDDATE,105) ENDDATE,WODCOUNT
		from FSM_WODTARGETASSIGN_DETAILS DETAILS where DETAILS.WODTARGET_ID=@TARGET_ID
		end
		else IF @ACTION = 'GETHEADERWODTARGET'
		Begin
				select WODTARGET_ID,WODTARGETTYPE TARGETLEVEL,WODTARGETDOCNUMBER TARGETDOCNUMBER,WODTARGETDATE TARGETDATE,CREATEDBY,CREATEDON,UPDATEDBY,UPDATEDON 
				from FSM_WODTARGETASSIGN STARGET  where STARGET.WODTARGET_ID=@TARGET_ID
		End
		else IF @ACTION = 'CHECKUNIQUETARGETDOCNUMBER'
		Begin
				if EXISTS (select 'Y' from FSM_WODTARGETASSIGN_DETAILS   where WODTARGETDOCNUMBER=@TargetNo and WODTARGET_ID<>@TARGET_ID)
				Begin
					set @ReturnValue=1;
				end
				Else
				Begin
					set @ReturnValue=0;
				End
				
		End
		ELSE IF (@ACTION='DELETE')
		BEGIN	    
		  delete from FSM_WODTARGETASSIGN_DETAILS  Where WODTARGET_ID =@TARGET_ID   
		  Delete from FSM_WODTARGETASSIGN Where WODTARGET_ID =@TARGET_ID     
		  set @ReturnValue='1'    
		END  
		else IF @ACTION = 'CHECKUNIQUETARGETDETAILS'
		Begin
				if EXISTS (select 'Y' from FSM_WODTARGETASSIGN_DETAILS where TARGETLEVEL=@UNIQUETARGETLEVEL and TARGETLEVELID=@UNIQUETARGETLEVELID and INTERNALID=@UNIQUEINTERNALID  
				and TIMEFRAME=@UNIQUETIMEFRAME
				and STARTEDATE=@UNIQUESTARTEDATE
				and ENDDATE=@UNIQUEENDDATE and WODTARGETTYPE=@TargetType)
				Begin
					set @ReturnValue=1;
				end
				Else
				Begin
					set @ReturnValue=0;
				End
				
		End

	

		
		
		COMMIT TRANSACTION
		

    END TRY

	
    BEGIN CATCH
		
		ROLLBACK TRANSACTION
	
        DECLARE @ErrorMessage NVARCHAR(4000) ;
        DECLARE @ErrorSeverity INT ;
        DECLARE @ErrorState INT ;
        SELECT  @ErrorMessage = ERROR_MESSAGE() ,
                @ErrorSeverity = ERROR_SEVERITY() ,
                @ErrorState = ERROR_STATE() ;
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState) ;
    END CATCH ;
    RETURN ;
GO

