IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PRC_LMSCONTENTMASTER]') AND type in (N'P', N'PC')) 
BEGIN 
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [PRC_LMSCONTENTMASTER] AS'  
END 
GO


ALTER PROCEDURE [dbo].[PRC_LMSCONTENTMASTER]
(
	@ACTION NVARCHAR(500)=NULL,
	@IS_PAGELOAD NVARCHAR(100)=NULL,
	@USERID INT=NULL,
	@BRANCHID NVARCHAR(MAX)=NULL,
	@CONTENTID BIGINT = NULL,
	@CONTENTTITLE NVARCHAR(100) = NULL,
	@CONTENTDESC NVARCHAR(300) = NULL,
	--@TOPICID NVARCHAR(MAX) = NULL,
	@TOPICID BIGINT = 0,
	@PLAYSEQUENCE BIGINT = NULL,
	@STATUS BIT = NULL,
	@ALLOWLIKE BIT = NULL,
	@ALLOWCOMMENTS BIT = NULL,
	@ALLOWSHARE BIT = NULL,
	@CONTENT_FILENAME NVARCHAR(200)=NULL,
	@CONTENT_FILESIZE BIGINT=NULL, 
	@CONTENT_FILEPATH NVARCHAR(100)=NULL, 
	@CONTENT_FILETYPE NVARCHAR(100)=NULL, 
	@CONTENT_FILEDURATION NUMERIC(18, 2)=NULL,
	@TOPICIDS NVARCHAR(MAX)=NULL,
	@CATEGORYIDS NVARCHAR(MAX)=NULL,
	@SELECTEDQUESTIONMAPLIST NVARCHAR(MAX)=NULL,
	@SERVERMAPPATH NVARCHAR(200)=NULL,
	@RETURN_VALUE nvarchar(500)=NULL OUTPUT,
	@RETURN_DUPLICATEMAPNAME nvarchar(MAX)=NULL OUTPUT,
	@CONTENT_ICONFILEPATH NVARCHAR(400)=NULL

)
 
AS
/****************************************************************************************************************************************************************************
Written by Sanchita on 21-06-2024 for V2.0.47	LMS- Content Master implementation
												Refer: 27552
****************************************************************************************************************************************************************************/
BEGIN
	SET NOCOUNT ON
	DECLARE @Strsql NVARCHAR(MAX)
	DECLARE @CONTENTID_AUTO BIGINT, @CONTENT_TOPICMAP_AUTO BIGINT, @MAPNAME_DUPLICATE NVARCHAR(MAX), @TOPICNAME NVARCHAR(300)
	declare @FIRSTTIME INT=1, @ID BIGINT
	DECLARE @TotalContents INT = 0, @ActiveContents INT = 0, @InactiveContents INT = 0
	DECLARE @QUESTIONMAPID_AUTO BIGINT, @ALLDUPLICATE BIGINT, @QUESTION_NAME NVARCHAR(500)

	IF(@ACTION='GETLISTINGDATA')
	BEGIN
		--select CONTENTID, CONTENTTITLE as [Name],CONTENT_FILESIZE, CONTENT_FILEPATH, CONTENT_FILETYPE,CONTENT_FILEDESC, 
		--	CONTENT_FILEPATHICON ,ISNULL(CONTENTSTATUS,0) IsActive from LMS_CONTENT
		--select ID,Name,FileSize,FilePath,FileType,FileDescription, CASE WHEN ISNULL(FilePathIcon,'')='' THEN 'NA' ELSE FilePathIcon END FilePathIcon ,ISNULL(IsActive,0) IsActive from FSM_DOCUMENT
		
		IF NOT EXISTS (SELECT * FROM sys.objects WHERE OBJECT_ID=OBJECT_ID(N'LMS_CONTENTMASTER_LISTING') AND TYPE IN (N'U'))
		BEGIN
			CREATE TABLE LMS_CONTENTMASTER_LISTING
			(
				USERID INT,
				SEQ INT,
				CONTENTID bigint NOT NULL,
				CONTENTTITLE NVARCHAR(100)  NOT NULL,
				CONTENTDESC NVARCHAR(300)  NOT NULL,
				CONTENT_TOPIC NVARCHAR(300) NULL,
				CONTENT_PLAYSEQ bigint NOT NULL,
				CONTENTSTATUS NVARCHAR(10) NULL,
				CONTENT_FILENAME NVARCHAR(200) NULL,
				CONTENT_FILESIZE INT NULL,
				CONTENT_FILEPATH NVARCHAR(100) NULL,
				CONTENT_FILETYPE NVARCHAR(100) NULL,
				--CONTENT_FILEDESC NVARCHAR(500) NULL,
				CONTENT_FILEDURATION NUMERIC(18, 2) NULL,
				CONTENT_ALLOWLIKE NVARCHAR(10) NULL,
				CONTENT_ALLOWCOMMENTS NVARCHAR(10) NULL,
				CONTENT_ALLOWSHARE NVARCHAR(10) NULL,
				CREATEDBY NVARCHAR(50) NULL,
				CREATEDON DATETIME NULL,
				UPDATEDBY NVARCHAR(50) NULL,
				UPDATEDON DATETIME NULL
			)
			CREATE NONCLUSTERED INDEX IX1 ON LMS_CONTENTMASTER_LISTING (SEQ)
		END
	
		DELETE FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID

		--if(@IS_PAGELOAD <> 'is_pageload')
		--begin
			INSERT INTO LMS_CONTENTMASTER_LISTING (USERID, SEQ, CONTENTID, CONTENTTITLE, CONTENTDESC, CONTENT_TOPIC, CONTENT_PLAYSEQ,
				CONTENTSTATUS , CONTENT_FILENAME, CONTENT_FILESIZE, CONTENT_FILEPATH, CONTENT_FILETYPE, CONTENT_FILEDURATION,
				CONTENT_ALLOWLIKE, CONTENT_ALLOWCOMMENTS, CONTENT_ALLOWSHARE, CREATEDBY, CREATEDON, UPDATEDBY, UPDATEDON)
			SELECT @USERID,ROW_NUMBER() OVER(ORDER BY CN.CONTENTID desc) AS SEQ, CN.CONTENTID, CN.CONTENTTITLE, CN.CONTENTDESC, 
				TP.TOPICNAME as CONTENT_TOPIC, CN.CONTENT_PLAYSEQ, (CASE WHEN CN.CONTENTSTATUS=1 THEN 'Yes' ELSE 'No' END) CONTENTSTATUS , 
				CN.CONTENT_FILENAME, CN.CONTENT_FILESIZE, CN.CONTENT_FILEPATH, CN.CONTENT_FILETYPE, CN.CONTENT_FILEDURATION,
				(CASE WHEN CN.CONTENT_ALLOWLIKE=1 THEN 'Yes' ELSE 'No' END), 
				(CASE WHEN CN.CONTENT_ALLOWCOMMENTS=1 THEN 'Yes' ELSE 'No' END),
				(CASE WHEN CN.CONTENT_ALLOWSHARE=1 THEN 'Yes' ELSE 'No' END),
				isnull(CON.cnt_firstName,'')+' '+isnull(CON.cnt_middleName,'')+' '+isnull(CON.cnt_lastName,'') [CREATEDBY], CN.[CREATEDON],
				isnull(CONM.cnt_firstName,'')+' '+isnull(CONM.cnt_middleName,'')+' '+isnull(CONM.cnt_lastName,'') [UPDATEDBY], CN.[UPDATEDON]
			FROM LMS_CONTENT CN
			LEFT OUTER JOIN LMS_TOPICS TP ON CN.CONTENT_TOPICID = TP.TOPICID
			LEFT OUTER JOIN TBL_MASTER_USER U ON CN.CREATEDBY=U.user_id
			LEFT OUTER JOIN tbl_master_contact CON ON U.user_contactId=CON.cnt_internalId
			LEFT OUTER JOIN TBL_MASTER_USER UM ON CN.UPDATEDBY=UM.user_id
			LEFT OUTER JOIN tbl_master_contact CONM ON UM.user_contactId=CONM.cnt_internalId
			ORDER BY CN.CONTENTID DESC
			

		SET @TotalContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID )
		SET @ActiveContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID AND CONTENTSTATUS= 'Yes')
		SET @InactiveContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID AND CONTENTSTATUS= 'No')

		select SEQ, CONVERT(VARCHAR(10),@TotalContents) AS cnt_TotalContents , CONVERT(VARCHAR(10),@ActiveContents) AS cnt_ActiveContents, 
			CONVERT(VARCHAR(10),@InactiveContents) AS cnt_InactiveContents, 
			CONVERT(VARCHAR(10), CONTENTID) CONTENTID, CONTENTTITLE, CONTENTDESC, CONTENTSTATUS,
			CONVERT(VARCHAR(200), CONTENT_FILESIZE) CONTENT_FILESIZE, CONTENT_FILENAME, CONTENT_FILEPATH, CONTENT_FILETYPE, 
			CONVERT(VARCHAR(200), CONTENT_FILEDURATION) CONTENT_FILEDURATION, 
			CONTENT_ALLOWLIKE, CONTENT_ALLOWCOMMENTS, CONTENT_ALLOWSHARE 
			from LMS_CONTENTMASTER_LISTING order by SEQ desc
		--end
	
	
	END
	ELSE IF(@ACTION='GETCONTENTCOUNTDATA')
	BEGIN
		--DECLARE @TotalContents INT = 0, @ActiveContents INT = 0, @InactiveContents INT = 0

		IF EXISTS (SELECT * FROM sys.objects WHERE OBJECT_ID=OBJECT_ID(N'LMS_CONTENTMASTER_LISTING') AND TYPE IN (N'U'))
		BEGIN
			SET @TotalContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID )
			SET @ActiveContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID AND CONTENTSTATUS= 'Yes')
			SET @InactiveContents = (SELECT COUNT(0) FROM LMS_CONTENTMASTER_LISTING WHERE USERID=@USERID AND CONTENTSTATUS= 'No')
		END

		SELECT @TotalContents AS cnt_TotalContents , @ActiveContents AS cnt_ActiveContents, @InactiveContents AS cnt_InactiveContents

	END
	IF(@ACTION='GETDROPDOWNBINDDATA')
	BEGIN
		--SELECT '0' AS TOPIC_ID,'-- Select --' AS TOPIC_NAME
		--UNION ALL
		SELECT convert(nvarchar(10),TOPICID) as TOPIC_ID, TOPICNAME TOPIC_NAME from LMS_TOPICS where TOPICSTATUS=1 order by TOPIC_NAME

		--select * from FTS_APP_CONFIG_SETTINGS where [Key]='LMSVideoUploadSize'
	END
	IF(@ACTION='ADDCONTENT')
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION
			IF NOT EXISTS(SELECT * FROM LMS_CONTENT WHERE CONTENTTITLE=@CONTENTTITLE AND CONTENT_TOPICID=@TOPICID)
			BEGIN
				SET @CONTENTID_AUTO = ISNULL((SELECT MAX(CONTENTID) FROM LMS_CONTENT ),0) + 1
				
				INSERT INTO LMS_CONTENT (CONTENTID, CONTENTTITLE, CONTENTDESC, CONTENT_PLAYSEQ, CONTENTSTATUS, CONTENT_TOPICID,
						CONTENT_FILENAME, CONTENT_FILESIZE, CONTENT_FILEPATH, CONTENT_FILETYPE, CONTENT_FILEPATHICON, CONTENT_FILEDURATION,
						CONTENT_ALLOWLIKE, CONTENT_ALLOWCOMMENTS, CONTENT_ALLOWSHARE, CREATEDBY, CREATEDON, UPDATEDBY, UPDATEDON )
					VALUES(@CONTENTID_AUTO, @CONTENTTITLE, @CONTENTDESC, @PLAYSEQUENCE, @STATUS, @TOPICID,
					@CONTENT_FILENAME, @CONTENT_FILESIZE, @CONTENT_FILEPATH, @CONTENT_FILETYPE,@CONTENT_ICONFILEPATH , @CONTENT_FILEDURATION,
					@ALLOWLIKE, @ALLOWCOMMENTS, @ALLOWSHARE, @USERID, SYSDATETIME(), NULL, NULL)

				SET @RETURN_VALUE = 'Content added succesfully.'
			END
			ELSE
			BEGIN
				SET @TOPICNAME = (SELECT TOPICNAME FROM LMS_TOPICS where TOPICID=@TOPICID )
					
				SET @RETURN_VALUE = 'Duplicate Content title cannot be entered. Please enter a unique Content title for Topic : ' + @TOPICNAME
					
			END
					
		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='Error in add.'
		
		END CATCH

	END
	IF(@ACTION='SHOWCONTENT')
	BEGIN
		SELECT convert(nvarchar(10),CN.CONTENTID) ContentID , CN.CONTENTTITLE AS ContentTitle, CN.CONTENTDESC AS ContentDesc, convert(nvarchar(10),
			CN.CONTENT_TOPICID) TopicIds ,
			convert(nvarchar(10),CN.CONTENT_PLAYSEQ) AS PlaySequence, CN.CONTENTSTATUS AS [Status] , 
			CN.CONTENT_FILENAME, 
			CN.CONTENT_FILESIZE, CN.CONTENT_FILEPATH, CN.CONTENT_FILETYPE, CN.CONTENT_FILEDURATION,
			CN.CONTENT_ALLOWLIKE AS AllowLike, CN.CONTENT_ALLOWCOMMENTS AS AllowComments, CN.CONTENT_ALLOWSHARE AS AllowShare,
			(@SERVERMAPPATH + CN.CONTENT_FILENAME) CONTENT_FULLPATH 
		FROM LMS_CONTENT CN
		WHERE CN.CONTENTID=@CONTENTID
	END
	IF(@ACTION='EDITCONTENT')
	BEGIN
		
		BEGIN TRY
		BEGIN TRANSACTION

			IF NOT EXISTS(SELECT * FROM LMS_CONTENT WHERE CONTENTTITLE=@CONTENTTITLE AND CONTENT_TOPICID=@TOPICID AND CONTENTID <> @CONTENTID )
			BEGIN
				IF (@CONTENT_FILENAME <>'')
				BEGIN
					UPDATE LMS_CONTENT SET CONTENTTITLE=@CONTENTTITLE, CONTENTDESC=@CONTENTDESC, CONTENT_PLAYSEQ=@PLAYSEQUENCE, CONTENTSTATUS=@STATUS, CONTENT_TOPICID=@TOPICID, 
						CONTENT_FILENAME=@CONTENT_FILENAME, CONTENT_FILESIZE=@CONTENT_FILESIZE, CONTENT_FILEPATH=@CONTENT_FILEPATH, 
						CONTENT_FILETYPE=@CONTENT_FILETYPE, CONTENT_FILEDURATION=@CONTENT_FILEDURATION,
						CONTENT_ALLOWLIKE=@ALLOWLIKE, CONTENT_ALLOWCOMMENTS=@ALLOWCOMMENTS, CONTENT_ALLOWSHARE=@ALLOWSHARE, 
						UPDATEDBY=@USERID, UPDATEDON=SYSDATETIME()
						,CONTENT_FILEPATHICON=@CONTENT_FILEPATH
					WHERE CONTENTID=@CONTENTID
				END
				ELSE
				BEGIN
					UPDATE LMS_CONTENT SET CONTENTTITLE=@CONTENTTITLE, CONTENTDESC=@CONTENTDESC, CONTENT_PLAYSEQ=@PLAYSEQUENCE, CONTENTSTATUS=@STATUS, CONTENT_TOPICID=@TOPICID, 
						--CONTENT_FILENAME=@CONTENT_FILENAME, CONTENT_FILESIZE=@CONTENT_FILESIZE, CONTENT_FILEPATH=@CONTENT_FILEPATH, 
						--CONTENT_FILETYPE=@CONTENT_FILETYPE, CONTENT_FILEDURATION=@CONTENT_FILEDURATION,
						CONTENT_ALLOWLIKE=@ALLOWLIKE, CONTENT_ALLOWCOMMENTS=@ALLOWCOMMENTS, CONTENT_ALLOWSHARE=@ALLOWSHARE, 
						UPDATEDBY=@USERID, UPDATEDON=SYSDATETIME()
					WHERE CONTENTID=@CONTENTID
				END

				SET @RETURN_VALUE = 'Content updated succesfully.'
			END
			ELSE
			BEGIN
				SET @TOPICNAME = (SELECT TOPICNAME FROM LMS_TOPICS where TOPICID=@TOPICID )
					
				SET @RETURN_VALUE = 'Duplicate Content title cannot be entered. Please enter a unique Content title for Topic : ' + @TOPICNAME

			END

			
		
		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='Error in update.'
		
		END CATCH

	END
	IF(@ACTION='DELETECONTENTS')
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION

			SET @CONTENT_FILENAME = (SELECT  CONTENT_FILENAME FROM LMS_CONTENT WHERE CONTENTID=@CONTENTID)

			DELETE FROM LMS_CONTENT WHERE CONTENTID=@CONTENTID

			IF EXISTS (SELECT * FROM sys.objects WHERE OBJECT_ID=OBJECT_ID(N'LMS_CONTENTMASTER_LISTING') AND TYPE IN (N'U'))
			BEGIN
				DELETE FROM LMS_CONTENTMASTER_LISTING WHERE CONTENTID=@CONTENTID
			END

			set @RETURN_VALUE= @CONTENT_FILENAME
		
		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='-10'
		
		END CATCH


	END
	IF(@ACTION='GET_CONTENTQUESTIONMAP_LISTINGDATA')
	BEGIN
		--select CONTENTID, CONTENTTITLE as [Name],CONTENT_FILESIZE, CONTENT_FILEPATH, CONTENT_FILETYPE,CONTENT_FILEDESC, 
		--	CONTENT_FILEPATHICON ,ISNULL(CONTENTSTATUS,0) IsActive from LMS_CONTENT
		--select ID,Name,FileSize,FilePath,FileType,FileDescription, CASE WHEN ISNULL(FilePathIcon,'')='' THEN 'NA' ELSE FilePathIcon END FilePathIcon ,ISNULL(IsActive,0) IsActive from FSM_DOCUMENT
	
		IF NOT EXISTS (SELECT * FROM sys.objects WHERE OBJECT_ID=OBJECT_ID(N'LMS_CONTENTQUESTIONMAP_LISTING') AND TYPE IN (N'U'))
		BEGIN
			CREATE TABLE LMS_CONTENTQUESTIONMAP_LISTING
			(
				USERID INT,
				SEQ INT,
				--CONTENT_QUESTIONMAPID BIGINT NOT NULL,
				CONTENTID bigint NOT NULL,
				CONTENTTITLE NVARCHAR(100)  NOT NULL,
				CONTENTDESC NVARCHAR(300)  NOT NULL,
				--QUESTIONS_ID BIGINT NOT NULL,
				--QUESTIONS_NAME NVARCHAR(500) NOT NULL,
				--QUESTIONS_DESCRIPTN NVARCHAR(600) NULL,
				QUESTIONSMAP_COUNT BIGINT NOT NULL,
				
			)
			CREATE NONCLUSTERED INDEX IX1 ON LMS_CONTENTQUESTIONMAP_LISTING (SEQ)
		END
	
		DELETE FROM LMS_CONTENTQUESTIONMAP_LISTING WHERE USERID=@USERID

		IF (@CONTENTID !=0 )
		BEGIN
			INSERT INTO LMS_CONTENTQUESTIONMAP_LISTING (USERID, SEQ, CONTENTID, CONTENTTITLE, CONTENTDESC, QUESTIONSMAP_COUNT)
			SELECT @USERID,ROW_NUMBER() OVER(ORDER BY CN.CONTENTID desc) AS SEQ, CN.CONTENTID, 
				CN.CONTENTTITLE, CN.CONTENTDESC, COUNT( MAP.CONTENTID )
			FROM LMS_CONTENT CN INNER JOIN LMS_CONTENT_QUESTIONMAP MAP ON CN.CONTENTID=MAP.CONTENTID
			where CN.CONTENTID = @CONTENTID
			group by CN.CONTENTID, CN.CONTENTTITLE, CN.CONTENTDESC
		END
	
	END
	IF(@ACTION='GETCATEGORYDROPDOWNBINDDATA')
	BEGIN
		SELECT convert(nvarchar(10),CATEGORYID) as CATEGORYID, CATEGORYNAME from LMS_CATEGORY where CATEGORYSTATUS=1 order by CATEGORYNAME

	END
	IF(@ACTION='GETQUESTIONLISTFORMAP')
	BEGIN
		select  s into #TOPICList from dbo.GetSplit(',',@TOPICIDS) 
		select  s into #CATEGORYList from dbo.GetSplit(',',@CATEGORYIDS) 

		SET @Strsql = ''
		SET @Strsql = 'SELECT DISTINCT convert(nvarchar(10),QN.QUESTIONS_ID) as [ID], QN.QUESTIONS_NAME AS [NAME], convert(bit,0) as selected '
		SET @Strsql += 'FROM LMS_QUESTIONS QN '
		
		IF(@TOPICIDS IS NOT NULL AND @TOPICIDS <> '')
		BEGIN
			SET @Strsql += 'INNER JOIN LMS_QUESTIONS_TOPICMAP QTMAP ON QN.QUESTIONS_ID=QTMAP.QUESTIONS_ID '
			SET @Strsql += 'INNER JOIN #TOPICList T_LIST ON QTMAP.QUESTIONS_TOPICID = T_LIST.s '
		END

		IF(@CATEGORYIDS IS NOT NULL AND @CATEGORYIDS <> '')
		BEGIN
			SET @Strsql += 'INNER JOIN LMS_QUESTIONS_CATEGORYMAP QCATMAP ON QN.QUESTIONS_ID=QCATMAP.QUESTIONS_ID '
			SET @Strsql += 'INNER JOIN #CATEGORYList C_LIST ON QCATMAP.QUESTIONS_CATEGORYID = C_LIST.s '
		END

		IF(@CONTENTID IS NOT NULL AND @CONTENTID <>0)
		BEGIN
			SET @Strsql += 'WHERE NOT EXISTS (SELECT CONTENTID FROM LMS_CONTENT_QUESTIONMAP WHERE CONTENTID='+CONVERT(CHAR,@CONTENTID)+' AND CONTENT_QUESTIONID=QN.QUESTIONS_ID ) '
			SET @Strsql += ' UNION ALL '
			SET @Strsql += 'SELECT DISTINCT convert(nvarchar(10),QN.QUESTIONS_ID) as [ID], QN.QUESTIONS_NAME AS [NAME], convert(bit,1) as selected '
			SET @Strsql += 'FROM LMS_QUESTIONS QN '
			SET @Strsql += 'WHERE EXISTS (SELECT CONTENTID FROM LMS_CONTENT_QUESTIONMAP WHERE CONTENTID='+CONVERT(CHAR,@CONTENTID)+' AND CONTENT_QUESTIONID=QN.QUESTIONS_ID ) '
		END

		EXEC (@StrSql)

		DROP TABLE #TOPICList
		DROP TABLE #CATEGORYList
	END
	IF(@ACTION = 'ADDCONTENTQUESTIONMAP' )
	BEGIN
		

		select s into #CONTQUESMAP  from dbo.GetSplit(',',@SELECTEDQUESTIONMAPLIST)

		SET @MAPNAME_DUPLICATE = ''
		SET @ALLDUPLICATE = '1'
		

		BEGIN TRY
		BEGIN TRANSACTION

			declare db_cursor_BO cursor for
			SELECT s FROM #CONTQUESMAP 	
			open db_cursor_BO
			fetch next from db_cursor_BO into @ID
			while @@FETCH_STATUS=0
			begin
				IF NOT EXISTS(SELECT * FROM LMS_CONTENT_QUESTIONMAP QMAP WHERE QMAP.CONTENTID=@CONTENTID AND QMAP.CONTENT_QUESTIONID=@ID )
				BEGIN
					SET @QUESTIONMAPID_AUTO = isnull((SELECT MAX(CONTENT_QUESTIONMAPID) FROM LMS_CONTENT_QUESTIONMAP ),0)+1

						INSERT INTO LMS_CONTENT_QUESTIONMAP (CONTENT_QUESTIONMAPID, CONTENTID, CONTENT_QUESTIONID, CREATEDBY, CREATEDON)
						VALUES (@QUESTIONMAPID_AUTO, @CONTENTID, @ID, @USERID, GETDATE() )

					SET @ALLDUPLICATE = 0
				END
				ELSE
				BEGIN
					SET @QUESTION_NAME = (SELECT QUESTIONS_NAME FROM LMS_QUESTIONS where QUESTIONS_ID=@ID )
					
					IF @MAPNAME_DUPLICATE=''
						SET @MAPNAME_DUPLICATE = TRIM(@QUESTION_NAME)
					ELSE
						SET @MAPNAME_DUPLICATE = @MAPNAME_DUPLICATE + ','+ TRIM(@QUESTION_NAME)
				END

			fetch next from db_cursor_BO into @ID
			END
			close db_cursor_BO
			deallocate db_cursor_BO

			SET @RETURN_VALUE = @ALLDUPLICATE
			set @RETURN_DUPLICATEMAPNAME = @MAPNAME_DUPLICATE
		
			DROP TABLE #CONTQUESMAP

		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='-10'
		
		END CATCH
	END
	IF(@ACTION = 'EDITCONTENTQUESTIONMAP')
	BEGIN
		select s into #CONTQUESMAP_EDIT  from dbo.GetSplit(',',@SELECTEDQUESTIONMAPLIST)

		SET @MAPNAME_DUPLICATE = ''
		SET @ALLDUPLICATE = '1'
		

		BEGIN TRY
		BEGIN TRANSACTION

			DELETE FROM LMS_CONTENT_QUESTIONMAP WHERE CONTENTID=@CONTENTID

			declare db_cursor_BO cursor for
			SELECT s FROM #CONTQUESMAP_EDIT 	
			open db_cursor_BO
			fetch next from db_cursor_BO into @ID
			while @@FETCH_STATUS=0
			begin
				SET @QUESTIONMAPID_AUTO = isnull((SELECT MAX(CONTENT_QUESTIONMAPID) FROM LMS_CONTENT_QUESTIONMAP ),0)+1

				INSERT INTO LMS_CONTENT_QUESTIONMAP (CONTENT_QUESTIONMAPID, CONTENTID, CONTENT_QUESTIONID, CREATEDBY, CREATEDON)
				VALUES (@QUESTIONMAPID_AUTO, @CONTENTID, @ID, @USERID, GETDATE() )

				SET @ALLDUPLICATE = 0
			fetch next from db_cursor_BO into @ID
			END
			close db_cursor_BO
			deallocate db_cursor_BO

			SET @RETURN_VALUE = @ALLDUPLICATE
			set @RETURN_DUPLICATEMAPNAME = @MAPNAME_DUPLICATE
		
			DROP TABLE #CONTQUESMAP_EDIT

		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='-10'
		
		END CATCH

	END
	IF (@ACTION='GETCONTENTDETAILSFOREDIT')
	BEGIN
		SELECT convert(nvarchar(10),QN.QUESTIONS_ID) as [ID], QN.QUESTIONS_NAME AS [NAME], convert(bit,1) as selected 
		FROM LMS_QUESTIONS QN INNER JOIN LMS_CONTENT_QUESTIONMAP QNMAP ON QN.QUESTIONS_ID=QNMAP.CONTENT_QUESTIONID AND QNMAP.CONTENTID=@CONTENTID
	END
	IF(@ACTION='QUESTIONMAPDELETE')
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION
			DELETE FROM LMS_CONTENT_QUESTIONMAP WHERE CONTENTID=@CONTENTID
			
			set @RETURN_VALUE='1'
		COMMIT TRANSACTION
		END TRY

		BEGIN CATCH

		ROLLBACK TRANSACTION
			set @RETURN_VALUE='-10'
		
		END CATCH
	END
	IF(@ACTION='GETMAPPEDQUESTIONSFORVIEW')
	BEGIN
		--IF NOT EXISTS (SELECT * FROM sys.objects WHERE OBJECT_ID=OBJECT_ID(N'LMS_MAPPEDQUESTIONS_LISTING') AND TYPE IN (N'U'))
		--BEGIN
		--	CREATE TABLE LMS_MAPPEDQUESTIONS_LISTING
		--	(
		--		USERID INT,
		--		SEQ INT,
		--		CONTENTID bigint NOT NULL,
		--		QUESTIONS_ID BIGINT NOT NULL,
		--		QUESTIONS_NAME NVARCHAR(500) NOT NULL,
		--		QUESTIONS_DESCRIPTN NVARCHAR(600) NULL
		--	)
		--	CREATE NONCLUSTERED INDEX IX1 ON LMS_MAPPEDQUESTIONS_LISTING (SEQ)
		--END
	
		--DELETE FROM LMS_MAPPEDQUESTIONS_LISTING WHERE USERID=@USERID

		IF (@CONTENTID !=0 )
		BEGIN

			--INSERT INTO LMS_MAPPEDQUESTIONS_LISTING (USERID, SEQ, CONTENTID, QUESTIONS_ID, QUESTIONS_NAME, QUESTIONS_DESCRIPTN)
			SELECT QN.QUESTIONS_NAME, QN.QUESTIONS_DESCRIPTN
			FROM LMS_CONTENT CN INNER JOIN LMS_CONTENT_QUESTIONMAP MAP ON CN.CONTENTID=MAP.CONTENTID
			INNER JOIN LMS_QUESTIONS QN ON MAP.CONTENT_QUESTIONID=QN.QUESTIONS_ID
			where CN.CONTENTID = @CONTENTID
		END
	END
END
GO
