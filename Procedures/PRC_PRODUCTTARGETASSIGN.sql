
--DROP PROC [dbo].[PRC_PRODUCTTARGETASSIGN] 

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PRC_PRODUCTTARGETASSIGN]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [PRC_PRODUCTTARGETASSIGN] AS' 
END
GO

ALTER PROC [dbo].[PRC_PRODUCTTARGETASSIGN] 
(
	@ACTION NVARCHAR(150) = NULL,
	@ProductTargetLevel NVARCHAR(100) = '',
	@PRODUCTTARGET_ID BIGINT = 0 ,
	@ProductTargetDate DATETIME = NULL,
	@ProductTargetNo NVARCHAR(100) = '',
	@USER_ID BIGINT=NULL,
	@UNIQUETARGETLEVELID bigint=0,
	@UNIQUETARGETLEVEL nvarchar(200)='',
	@UNIQUEINTERNALID nvarchar(10)='' ,
	@UNIQUETIMEFRAME nvarchar(200)='' ,
	@UNIQUESTARTEDATE datetime= NULL,
	@UNIQUEENDDATE datetime= NULL,
	@UNIQUEPRODUCTID BIGINT= NULL,
	@UDTProductTarget FSM_UDT_PRODUCTTARGETASSIGN ReadOnly,
	@ReturnValue BIGINT=0 OUTPUT

) --WITH ENCRYPTION
AS  
/************************************************************************************************
Written by Sanchita
027770: A new module is required as Target Assign
************************************************************************************************/
BEGIN
    SET NOCOUNT ON ;
 --   BEGIN TRY 
	--BEGIN TRANSACTION	

	DECLARE @PRODUCTTARGETID BIGINT = 0;
	Declare @LastCount bigint=0,@LastCountDetails bigint=0
	DECLARE @Success BIT = 0;
	DECLARE @TARGETLEVELID bigint=0,@TARGETLEVEL nvarchar(200)='',@INTERNALID nvarchar(100)='' ,@TIMEFRAME nvarchar(200)='' ,@STARTEDATE datetime,@ENDDATE datetime
	,@PRODUCTID bigint=0,@ORDERAMOUNT Numeric(18,4)=0,@ORDERQTY Numeric(18,4)=0, @PRODUCTCODE [varchar](80), @PRODUCTNAME [varchar](100)

	
	IF @ACTION = 'INSERTPRODUCTTARGET'
	BEGIN
		IF @ProductTargetNo IS NOT NULL AND @ProductTargetNo <> ''
		BEGIN
					
			BEGIN TRY
			BEGIN TRANSACTION


				select  @LastCount=iSNULL(MAX(PRODUCTTARGET_ID),0) from FSM_PRODUCTTARGETASSIGN  
				INSERT INTO FSM_PRODUCTTARGETASSIGN(PRODUCTTARGET_ID,TARGETLEVELID,TARGETDOCNUMBER,TARGETDATE,CREATEDBY,CREATEDON) 
				VALUES(@LastCount+1,@ProductTargetLevel,@ProductTargetNo,@ProductTargetDate,@USER_ID,GETDATE());			

					
				
					
				DECLARE db_cursor CURSOR FOR  
				Select 	TARGETLEVELASSIGNID,TARGETLEVELASSIGNNAME,INTERNALID,TIMEFRAME ,STARTDATE,ENDDATE,PRODUCTID,PRODUCTCODE, PRODUCTNAME,
					ORDERAMOUNT,ORDERQTY
				From @UDTProductTarget order by SlNo ASC				

				OPEN db_cursor   
				FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID,@PRODUCTCODE, @PRODUCTNAME,
					@ORDERAMOUNT,@ORDERQTY

				WHILE @@FETCH_STATUS = 0   
				BEGIN 

					select  @LastCountDetails=iSNULL(MAX(PRODUCTTARGETDETAILS_ID),0) from FSM_PRODUCTTARGETASSIGN_DETAILS 
					
					if NOT EXISTS (select 'Y' from FSM_PRODUCTTARGETASSIGN_DETAILS   where TARGETLEVELASSIGNID=@TARGETLEVELID and TARGETLEVELASSIGNNAME=@TARGETLEVEL and 	INTERNALID=@INTERNALID and TIMEFRAME=@TIMEFRAME
					and STARTDATE=@STARTEDATE and ENDDATE=@ENDDATE and PRODUCTID=@PRODUCTID and PRODUCTCODE=@PRODUCTCODE )
					Begin
					INSERT INTO FSM_PRODUCTTARGETASSIGN_DETAILS(PRODUCTTARGETDETAILS_ID,PRODUCTTARGET_ID,TARGETDOCNUMBER
						,TARGETLEVELASSIGNID, TARGETLEVELASSIGNNAME, INTERNALID, TIMEFRAME, STARTDATE, ENDDATE, PRODUCTID, PRODUCTCODE, PRODUCTNAME,
						ORDERAMOUNT, ORDERQTY,TARGETLEVELID	, CREATEDBY, CREATEDON	
					)
					Select @LastCountDetails+1,@LastCount+1,@ProductTargetNo
						,@TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID,@PRODUCTCODE, @PRODUCTNAME,
						@ORDERAMOUNT,@ORDERQTY ,@ProductTargetLevel, @USER_ID, GETDATE()
					END
					
					--SET @Success = 1;

					FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID,@PRODUCTCODE, @PRODUCTNAME,
						@ORDERAMOUNT,@ORDERQTY
				END   

				CLOSE db_cursor   
				DEALLOCATE db_cursor
			
				SET @Success = 1;
						
				SELECT @LastCount+1 AS DetailsID, @Success AS 'Success';

			COMMIT TRANSACTION
			END TRY

			BEGIN CATCH

			ROLLBACK TRANSACTION
				set @Success='-10'
						
				DECLARE @ErrorMessage NVARCHAR(4000) ;
				DECLARE @ErrorSeverity INT ;
				DECLARE @ErrorState INT ;
				SELECT  @ErrorMessage = ERROR_MESSAGE() ,
						@ErrorSeverity = ERROR_SEVERITY() ,
						@ErrorState = ERROR_STATE() ;
				RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState) ;

			END CATCH

		END
		
	END
	Else IF @ACTION = 'UPDATEPRODUCTTARGET'
	BEGIN

		IF @ProductTargetNo IS NOT NULL AND @ProductTargetNo <> ''
		BEGIN


					--update FSM_PRODUCTTARGETASSIGN set TARGETLEVEL=@ProductTargetLevel,TARGETDOCNUMBER=@ProductTargetNo,TARGETDATE=@ProductTargetDate,UPDATEDBY=@USER_ID,UPDATEDON=GETDATE()
					--where PRODUCTTARGET_ID=@PRODUCTTARGET_ID

					update FSM_PRODUCTTARGETASSIGN set UPDATEDBY=@USER_ID,UPDATEDON=GETDATE() where PRODUCTTARGET_ID=@PRODUCTTARGET_ID


					delete from FSM_PRODUCTTARGETASSIGN_DETAILS where PRODUCTTARGET_ID=@PRODUCTTARGET_ID

					
					DECLARE db_cursor CURSOR FOR  
				Select 	TARGETLEVELASSIGNID,TARGETLEVELASSIGNNAME,INTERNALID,TIMEFRAME ,STARTDATE,ENDDATE,PRODUCTID, PRODUCTCODE, PRODUCTNAME,
					ORDERAMOUNT,ORDERQTY
				From @UDTProductTarget order by SlNo ASC				

				OPEN db_cursor   
				FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID, @PRODUCTCODE, @PRODUCTNAME,
					@ORDERAMOUNT,@ORDERQTY

				WHILE @@FETCH_STATUS = 0   
				BEGIN 

					select  @LastCountDetails=iSNULL(MAX(PRODUCTTARGETDETAILS_ID),0) from FSM_PRODUCTTARGETASSIGN_DETAILS  
					if NOT EXISTS (select 'Y' from FSM_PRODUCTTARGETASSIGN_DETAILS   where TARGETLEVELASSIGNID=@TARGETLEVELID and TARGETLEVELASSIGNNAME=@TARGETLEVEL and 	INTERNALID=@INTERNALID and TIMEFRAME=@TIMEFRAME
					and STARTDATE=@STARTEDATE and ENDDATE=@ENDDATE and PRODUCTID=@PRODUCTID and PRODUCTCODE=@PRODUCTCODE )
					Begin
					INSERT INTO FSM_PRODUCTTARGETASSIGN_DETAILS(PRODUCTTARGETDETAILS_ID,PRODUCTTARGET_ID,TARGETDOCNUMBER
						,TARGETLEVELASSIGNID, TARGETLEVELASSIGNNAME, INTERNALID, TIMEFRAME, STARTDATE, ENDDATE, PRODUCTID, PRODUCTCODE, PRODUCTNAME, 
						ORDERAMOUNT, ORDERQTY, TARGETLEVELID, CREATEDBY, CREATEDON	
					)
					Select @LastCountDetails+1,@PRODUCTTARGET_ID,@ProductTargetNo
						,@TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID, @PRODUCTCODE, @PRODUCTNAME,
						@ORDERAMOUNT,@ORDERQTY, @ProductTargetLevel, @USER_ID, GETDATE()
					END
					
					--SET @Success = 1;

					FETCH NEXT FROM db_cursor INTO @TARGETLEVELID,@TARGETLEVEL,@INTERNALID,@TIMEFRAME ,@STARTEDATE,@ENDDATE,@PRODUCTID,@PRODUCTCODE, @PRODUCTNAME,
						@ORDERAMOUNT,@ORDERQTY
				END   

				CLOSE db_cursor   
				DEALLOCATE db_cursor
		END

		SELECT @PRODUCTTARGET_ID AS DetailsID, @Success AS 'Success';

		END

		else IF @ACTION = 'GETDETAILSPRODUCTTARGET'
		Begin
			select PRODUCTTARGETDETAILS_ID,ROW_NUMBER() OVER(ORDER BY PRODUCTTARGETDETAILS_ID ASC) AS SlNO,TARGETDOCNUMBER TARGETDOCNUMBER,TARGETLEVELASSIGNID as TARGETLEVELID,
			TARGETLEVELASSIGNNAME as TARGETLEVEL,INTERNALID,TIMEFRAME,CONVERT(nvarchar(10),STARTDATE,105) STARTEDATE, CONVERT(nvarchar(10),ENDDATE,105) ENDDATE,
			PRODUCTCODE ,PRODUCTNAME,PRODUCTID,ORDERAMOUNT,ORDERQTY
			from FSM_PRODUCTTARGETASSIGN_DETAILS DETAILS 
			where DETAILS.PRODUCTTARGET_ID=@PRODUCTTARGET_ID
		end
		else IF @ACTION = 'GETHEADERPRODUCTTARGET'
		Begin
			select PRODUCTTARGET_ID, TARGETLEVELID as TARGETLEVEL, TARGETDOCNUMBER, TARGETDATE, CREATEDBY, CREATEDON, UPDATEDBY, UPDATEDON from FSM_PRODUCTTARGETASSIGN STARGET  
				where STARGET.PRODUCTTARGET_ID=@PRODUCTTARGET_ID
		End
		else IF @ACTION = 'CHECKUNIQUETARGETDOCNUMBER'
		Begin
			if EXISTS (select 'Y' from FSM_PRODUCTTARGETASSIGN   where TARGETDOCNUMBER=@ProductTargetNo  and PRODUCTTARGET_ID<>@PRODUCTTARGET_ID)
			Begin
				set @ReturnValue=1;
			end
			Else
			Begin
				set @ReturnValue=0;
			End
		End
		ELSE IF (@ACTION='DELETE')
		BEGIN	    
		  delete from FSM_PRODUCTTARGETASSIGN_DETAILS  Where PRODUCTTARGET_ID =@PRODUCTTARGET_ID   
		  Delete from FSM_PRODUCTTARGETASSIGN Where PRODUCTTARGET_ID =@PRODUCTTARGET_ID     
		  set @ReturnValue='1'    
		END  
			
		else IF @ACTION = 'CHECKUNIQUETARGETDETAILS'
		Begin
				if EXISTS (select 'Y' from FSM_PRODUCTTARGETASSIGN_DETAILS where TARGETLEVELASSIGNID=@UNIQUETARGETLEVEL and TARGETLEVELASSIGNNAME=@UNIQUETARGETLEVELID 
					and INTERNALID=@UNIQUEINTERNALID and TIMEFRAME=@UNIQUETIMEFRAME and STARTDATE=@UNIQUESTARTEDATE and ENDDATE=@UNIQUEENDDATE 
					and TARGETLEVELID=@ProductTargetLevel AND PRODUCTID=@UNIQUEPRODUCTID
					AND TARGETDOCNUMBER<>@ProductTargetNo)
				Begin
					set @ReturnValue=1;
				end
				Else
				Begin
					set @ReturnValue=0;
				End
				
		End
		

END

GO

